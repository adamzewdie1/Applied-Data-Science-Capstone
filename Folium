import piplite
await piplite.install(['folium'])
await piplite.install(['pandas'])
import folium
import pandas as pd
# Import folium MarkerCluster plugin
from folium.plugins import MarkerCluster
# Import folium MousePosition plugin
from folium.plugins import MousePosition
# Import folium DivIcon plugin
from folium.features import DivIcon
# Download and read the `spacex_launch_geo.csv`
from js import fetch
import io

URL = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv'
resp = await fetch(URL)
spacex_csv_file = io.BytesIO((await resp.arrayBuffer()).to_py())
spacex_df=pd.read_csv(spacex_csv_file)

# Select relevant sub-columns: `Launch Site`, `Lat(Latitude)`, `Long(Longitude)`, `class`
spacex_df = spacex_df[['Launch Site', 'Lat', 'Long', 'class']]
launch_sites_df = spacex_df.groupby(['Launch Site'], as_index=False).first()
launch_sites_df = launch_sites_df[['Launch Site', 'Lat', 'Long']]
launch_sites_df

# Start location is NASA Johnson Space Center
nasa_coordinate = [29.559684888503615, -95.0830971930759]
site_map = folium.Map(location=nasa_coordinate, zoom_start=1)
site_map

# Create a blue circle at NASA Johnson Space Center's coordinate with a popup label showing its name
circle = folium.Circle(nasa_coordinate, radius=1000, color='#d35400', fill=True).add_child(folium.Popup('NASA Johnson Space Center'))
# Create a blue circle at NASA Johnson Space Center's coordinate with a icon showing its name
marker = folium.map.Marker(
    nasa_coordinate,
    # Create an icon as a text label
    icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'NASA JSC',
        )
    )
site_map.add_child(circle)
site_map.add_child(marker)


lists_coordinate=[launch_sites_df.iloc[0,1],launch_sites_df.iloc[0,2]]
lists_coordinate

# Initial the map
site_map = folium.Map(location=nasa_coordinate, zoom_start=5)
# For each launch site, add a Circle object based on its coordinate (Lat, Long) values. In addition, add Launch site name as a popup label
circle_list = []  # to collect circles for adding later
marker_list = []  # to collect markers for adding later

# Iterate over the DataFrame rows properly using index
for n in range(len(launch_sites_df)):
    # Get coordinates for the launch site: [latitude, longitude]
    coords = [launch_sites_df.iloc[n, 1], launch_sites_df.iloc[n, 2]]

    # Get launch site name for popup and label
    site_name = launch_sites_df.iloc[n, 0]  # assuming site name is in column 0

    # Create a circle on the map
    circle = folium.Circle(
        location=coords,
        radius=1000,
        color='#d35400',
        fill=True,
        fill_color='#d35400',
        fill_opacity=0.6
    ).add_child(folium.Popup(site_name))

    # Create a marker with a DivIcon label
    marker = folium.map.Marker(
        location=coords,
        icon=DivIcon(
            icon_size=(150, 36),
            icon_anchor=(0, 0),
            html=f'<div style="font-size: 12px; color:#d35400;"><b>{site_name}</b></div>',
        )
    )

    # Add circle and marker to the lists
    circle_list.append(circle)
    marker_list.append(marker)

# Add all circles and markers to the map
for circle in circle_list:
    site_map.add_child(circle)

for marker in marker_list:
    site_map.add_child(marker)


temp=[]
classes=spacex_df["class"]
for n in range(len(spacex_df)):
    if classes[n]==1:
        temp.append("green")
    else:
        temp.append("red")

spacex_df["marker_color"]=temp

spacex_df.head()
# Apply a function to check the value of `class` column
# If class=1, marker_color value will be green
# If class=0, marker_color value will be red

# Add marker_cluster to current site_map
site_map.add_child(marker_cluster)

# for each row in spacex_df data frame
# create a Marker object with its coordinate
# and customize the Marker's icon property to indicate if this launch was successed or failed, 
# e.g., icon=folium.Icon(color='white', icon_color=row['marker_color']
for index, record in spacex_df.iterrows():
    # TODO: Create and add a Marker cluster to the site map
    # marker = folium.Marker(...)
     location = [record['Lat'], record['Long']]  # adjust column names if needed

    # Create marker with customized icon color from marker_color column
    marker = folium.Marker(
        location=location,
        icon=folium.Icon(color='white', icon_color=record['marker_color'])
    )
    marker_cluster.add_child(marker)

site_map

# Add Mouse Position to get the coordinate (Lat, Long) for a mouse over on the map
formatter = "function(num) {return L.Util.formatNum(num, 5);};"
mouse_position = MousePosition(
    position='topright',
    separator=' Long: ',
    empty_string='NaN',
    lng_first=False,
    num_digits=20,
    prefix='Lat:',
    lat_formatter=formatter,
    lng_formatter=formatter,
)

site_map.add_child(mouse_position)
site_map

from math import sin, cos, sqrt, atan2, radians

def calculate_distance(lat1, lon1, lat2, lon2):
    # approximate radius of earth in km
    R = 6373.0

    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance

# find coordinate of the closet coastline
# e.g.,: Lat: 28.56367  Lon: -80.57163
coastline_lat = 28.55
coastline_lon = -80.60
launch_sites_df.iloc[0,1],launch_sites_df.iloc[0,2]
# distance_coastline = calculate_distance(launch_site_lat, launch_site_lon, coastline_lat, coastline_lon)
for n in range(len(launch_sites_df)):
               launch_site_lat=launch_sites_df.iloc[n,1]
               launch_site_lon = launch_sites_df.iloc[n,2]
               distance_coastline = calculate_distance(launch_site_lat, launch_site_lon, coastline_lat, coastline_lon)
               print(f"Distance to closest coastline:{launch_sites_df.iloc[n,0]}   {distance_coastline:.2f} km")

# Create and add a folium.Marker on your selected closest coastline point on the map
# Display the distance between coastline point and launch site using the icon property 
# for example
# distance_marker = folium.Marker(
#    coordinate,
#    icon=DivIcon(
#        icon_size=(20,20),
#        icon_anchor=(0,0),
#        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % "{:10.2f} KM".format(distance),
#        )
#    )

# Create the marker with DivIcon showing the distance in KM

coastline_coord=[28.55,-80.60]
distance_marker = folium.Marker(
    location=coastline_coord,
    icon=DivIcon(
        icon_size=(100, 30),
        icon_anchor=(0, 0),
        html=f'<div style="font-size: 14px; color:#d35400; font-weight: bold;">{distance_coastline:.2f} KM</div>'
    )
)

# Add the marker to the map
site_map.add_child(distance_marker)


# Create a `folium.PolyLine` object using the coastline coordinates and launch site coordinate
launch_site_coord = [launch_site_lat, launch_site_lon]
coastline_coord = [coastline_lat, coastline_lon]

# Create a PolyLine between launch site and closest coastline point
line = folium.PolyLine(
    locations=[launch_site_coord, coastline_coord],  # list of points to connect
    color='blue',      # line color
    weight=2,          # line thickness
    opacity=0.7
)

# Add the line to the map
site_map.add_child(line)

# Create a marker with distance to a closest city, railway, highway, etc.
# Draw a line between the marker to the launch site
closest_point_coord = [25, -89]

# Calculate distance using your function
distance = calculate_distance(
    launch_site_coord[0], launch_site_coord[1],
    closest_point_coord[0], closest_point_coord[1]
)

# Create the Folium map centered on launch site
site_map = folium.Map(location=launch_site_coord, zoom_start=10)

# Add marker for the launch site
folium.Marker(
    location=launch_site_coord,
    popup="Launch Site",
    icon=folium.Icon(color='green', icon='rocket')
).add_to(site_map)

# Add marker for the closest point with distance label using DivIcon
distance_marker = folium.Marker(
    location=closest_point_coord,
    icon=DivIcon(
        icon_size=(150, 30),
        icon_anchor=(0, 0),
        html=f'<div style="font-size: 14px; color:#d35400; font-weight: bold;">{distance:.2f} KM</div>',
    ),
    popup=f"Distance: {distance:.2f} km"
)
distance_marker.add_to(site_map)

# Draw a line between launch site and closest point
line = folium.PolyLine(
    locations=[launch_site_coord, closest_point_coord],
    color='blue',
    weight=3,
    opacity=0.7
)
site_map.add_child(line)

# Display or save the map
site_map

